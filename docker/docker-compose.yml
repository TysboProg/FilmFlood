volumes:
  movie-data:
  payment-data:
  users-data:

networks:
  main-network:

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../nginx/ssl/:/etc/nginx/ssl/
    depends_on:
      - backend-movie
      - backend-users
      - backend-payment
      - backend-notification
      - frontend-nextjs
    networks:
      main-network:

  postgres-movie:
    image: postgres:15-alpine
    container_name: postgres-movie
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: inal_2411
      POSTGRES_USER: postgres
      POSTGRES_DB: movie
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d movie" ]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    volumes:
      - movie-data:/var/lib/postgresql/data
    networks:
      main-network:
        aliases:
          - db-movie

  postgres-users:
      image: postgres:15-alpine
      container_name: postgres-users
      restart: unless-stopped
      ports:
        - "5433:5433"  # Внутри контейнера всегда 5432
      environment:
        POSTGRES_PASSWORD: inal_2411
        POSTGRES_USER: postgres
        POSTGRES_DB: users
        PGDATA: /var/lib/postgresql/data/pgdata
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U postgres -d users" ]
        interval: 15s
        timeout: 10s
        retries: 10
        start_period: 30s
      volumes:
        - users-data:/var/lib/postgresql/data
      networks:
        main-network:
          aliases:
            - db-users

  postgres-payment:
      image: postgres:15-alpine
      container_name: postgres-payment
      restart: unless-stopped
      ports:
        - "5434:5434"  # Внутри контейнера всегда 5432
      environment:
        POSTGRES_PASSWORD: inal_2411
        POSTGRES_USER: postgres
        POSTGRES_DB: payment
        PGDATA: /var/lib/postgresql/data/pgdata
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U postgres -d payment" ]
        interval: 15s
        timeout: 10s
        retries: 10
        start_period: 30s
      volumes:
        - payment-data:/var/lib/postgresql/data
      networks:
        main-network:

  backend-movie:
    build:
      context: ../backend/movie
      dockerfile: Dockerfile
    container_name: backend-movie
    command:
      - sh
      - -c
      - |
        alembic revision --autogenerate &&
        alembic upgrade head &&
        uv run python main.py
    environment:
      MOVIE_DATABASE_URL: postgresql+asyncpg://postgres:inal_2411@postgres-movie:5432/movie
      REDIS_URL: redis://81.177.222.26:6379
      KAFKA_BOOTSTRAP_SERVERS: 81.177.222.26:9092
      S3_BUCKET_NAME: filmflood
      S3_REGION_NAME: ru-1
      S3_AWS_SECRET_ACCESS_KEY: 3cefa4cd7b3e4350bc3d8bc9b146a062
      S3_AWS_ACCESS_KEY_ID: f280aec5d0cf4e258fcdefbefe5321ac
      S3_ENDPOINT_URL: https://s3.ru-1.storage.selcloud.ru
    depends_on:
      - postgres-movie
    ports:
      - "8010:8010"
    networks:
      main-network:

  backend-notification:
    build:
      context: ../backend/notification
      dockerfile: Dockerfile
    container_name: backend-notification
    command:
      - sh
      - -c
      - |
        uv run python main.py
    environment:
      MAIL_USERNAME: inal.gergov152@yandex.ru
      MAIL_PASSWORD: mkirsnxltnuvbspi
      MAIL_SERVER: smtp.yandex.ru
      MAIL_PORT: 587
      REDIS_URL: redis://81.177.222.26:6379
      KAFKA_BOOTSTRAP_SERVERS: 81.177.222.26:9092
    ports:
      - "8020:8020"
    networks:
      main-network:

  backend-users:
    build:
      context: ../backend/users
      dockerfile: Dockerfile
    container_name: backend-users
    command:
      - sh
      - -c
      - |
        alembic revision --autogenerate &&
        alembic upgrade head &&
        uv run python main.py
    environment:
      USERS_DATABASE_URL: postgresql+asyncpg://postgres:inal_2411@postgres-users:5433/users
      KAFKA_BOOTSTRAP_SERVERS: 81.177.222.26:9092
      S3_BUCKET_NAME: filmflood
      S3_REGION_NAME: ru-1
      S3_AWS_SECRET_ACCESS_KEY: 3cefa4cd7b3e4350bc3d8bc9b146a062
      S3_AWS_ACCESS_KEY_ID: f280aec5d0cf4e258fcdefbefe5321ac
      S3_ENDPOINT_URL: https://s3.ru-1.storage.selcloud.ru
    depends_on:
      - postgres-users
    ports:
      - "8030:8030"
    networks:
      main-network:

  frontend-nextjs:
       build:
         context: ../frontend
         dockerfile: Dockerfile
       container_name: frontend-nextjs
       ports:
         - "3000:3000"
       environment:
         NODE_ENV: production
       networks:
         main-network:

  backend-payment:
    build:
      context: ../backend/payment
      dockerfile: Dockerfile
    container_name: backend-payment
    command:
      - sh
      - -c
      - |
        alembic revision --autogenerate &&
        alembic upgrade head &&
        uv run python main.py
    environment:
      YOOKASSA_ACCOUNT_ID: 1040268
      YOOKASSA_SECRET_KEY: test_lJbazFAJBCMo7j-1u4A7Jg-CZuqhiTbV70j_lx1AbMo
      PAYMENT_DATABASE_URL: postgresql+asyncpg://postgres:inal_2411@postgres-payment:5434/payment
      REDIS_URL: redis://81.177.222.26:6379
      KAFKA_BOOTSTRAP_SERVERS: 81.177.222.26:9092
      S3_BUCKET_NAME: filmflood
      S3_REGION_NAME: ru-1
      S3_AWS_SECRET_ACCESS_KEY: 3cefa4cd7b3e4350bc3d8bc9b146a062
      S3_AWS_ACCESS_KEY_ID: f280aec5d0cf4e258fcdefbefe5321ac
      S3_ENDPOINT_URL: https://s3.ru-1.storage.selcloud.ru
    depends_on:
      - postgres-payment
    ports:
      - "8040:8040"
    networks:
      main-network:            
