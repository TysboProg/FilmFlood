volumes:
  movie-data:
  payment-data:
  users-data:
  notification-data:

networks:
  main-network:

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../nginx/ssl/:/etc/nginx/ssl/
    depends_on:
      - backend-movie
      - backend-users
      - backend-payment
      - backend-notification
    networks:
      main-network:

  postgres-movie:
    image: postgres:latest
    container_name: postgres-movie
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: inal_2411
      POSTGRES_USER: postgres
      POSTGRES_DB: movie
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username=postgres --dbname=movie" ]
      interval: 15s
      timeout: 10s
      retries: 10
    volumes:
      - movie-data:/var/lib/postgresql/data
    networks:
      main-network:

  postgres-users:
    image: postgres:latest
    container_name: postgres-users
    ports:
      - "5433:5433"
    environment:
      POSTGRES_PASSWORD: inal_2411
      POSTGRES_USER: postgres
      POSTGRES_DB: users
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username=postgres --dbname=users" ]
      interval: 15s
      timeout: 10s
      retries: 10
    volumes:
      - users-data:/var/lib/postgresql/data
    networks:
      main-network:

  postgres-payment:
    image: postgres:latest
    container_name: postgres-payment
    ports:
      - "5434:5434"
    environment:
      POSTGRES_PASSWORD: inal_2411
      POSTGRES_USER: postgres
      POSTGRES_DB: payment
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username=postgres --dbname=payment" ]
      interval: 15s
      timeout: 10s
      retries: 10
    volumes:
      - payment-data:/var/lib/postgresql/data
    networks:
      main-network:

  postgres-notification:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5435:5435"
    environment:
      POSTGRES_PASSWORD: inal_2411
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres-notification
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username=postgres --dbname=notification" ]
      interval: 15s
      timeout: 10s
      retries: 10
    volumes:
      - notification-data:/var/lib/postgresql/data
    networks:
      main-network:            

  backend-movie:
    build:
      context: ../backend/movie
      dockerfile: Dockerfile
    container_name: backend-movie
    command:
      - sh
      - -c
      - |
        alembic revision --autogenerate &&
        alembic upgrade head &&
        uv run python main.py
    environment:
      MOVIE_DATABASE_URL: ${MOVIE_DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      S3_REGION_NAME: ${S3_REGION_NAME}
      S3_AWS_SECRET_ACCESS_KEY: ${S3_AWS_SECRET_ACCESS_KEY}
      S3_AWS_ACCESS_KEY_ID: ${S3_AWS_ACCESS_KEY_ID}
      S3_ENDPOINT_URL: ${S3_ENDPOINT_URL}
    depends_on:
      - postgres-movie
    ports:
      - "8010:8010"
    networks:
      main-network:

  backend-notification:
    build:
      context: ../backend/notification
      dockerfile: Dockerfile
    container_name: backend-notification
    command:
      - sh
      - -c
      - |
        alembic revision --autogenerate &&
        alembic upgrade head &&
        uv run python main.py
    environment:
      NOTIFICATION_DATABASE_URL: ${NOTIFICATION_DATABASE_URL}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_SERVER: ${MAIL_SERVER}
      MAIL_PORT: ${MAIL_PORT}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      REDIS_URL: ${REDIS_URL}
    depends_on:
      - postgres-notification
    ports:
      - "8020:8020"
    networks:
      main-network:

  backend-users:
    build:
      context: ../backend/users
      dockerfile: Dockerfile
    container_name: backend-users
    command:
      - sh
      - -c
      - |
        alembic revision --autogenerate &&
        alembic upgrade head &&
        uv run python main.py
    environment:
      USERS_DATABASE_URL: ${USERS_DATABASE_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      S3_REGION_NAME: ${S3_REGION_NAME}
      S3_AWS_SECRET_ACCESS_KEY: ${S3_AWS_SECRET_ACCESS_KEY}
      S3_AWS_ACCESS_KEY_ID: ${S3_AWS_ACCESS_KEY_ID}
      S3_ENDPOINT_URL: ${S3_ENDPOINT_URL}
    depends_on:
      - postgres-users
    ports:
      - "8030:8030"
    networks:
      main-network: 

  backend-payment:
    build:
      context: ../backend/payment
      dockerfile: Dockerfile
    container_name: backend-payment
    command:
      - sh
      - -c
      - |
        alembic revision --autogenerate &&
        alembic upgrade head &&
        uv run python main.py
    environment:
      YOOKASSA_ACCOUNT_ID: ${YOOKASSA_ACCOUNT_ID}
      YOOKASSA_SECRET_KEY: ${YOOKASSA_SECRET_KEY}
      PAYMENT_DATABASE_URL: ${PAYMENT_DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      S3_REGION_NAME: ${S3_REGION_NAME}
      S3_AWS_SECRET_ACCESS_KEY: ${S3_AWS_SECRET_ACCESS_KEY}
      S3_AWS_ACCESS_KEY_ID: ${S3_AWS_ACCESS_KEY_ID}
      S3_ENDPOINT_URL: ${S3_ENDPOINT_URL}
    depends_on:
      - postgres-payment
    ports:
      - "8040:8040"
    networks:
      main-network:            
